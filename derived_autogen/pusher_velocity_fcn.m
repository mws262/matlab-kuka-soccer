function pusher_vel = pusher_velocity_fcn(R,ax,ay,jx,jy,pusherX,pusherY,pusherZ,rx,ry,thetadot,theta,vx,vy)
%PUSHER_VELOCITY_FCN
%    PUSHER_VEL = PUSHER_VELOCITY_FCN(R,AX,AY,JX,JY,PUSHERX,PUSHERY,PUSHERZ,RX,RY,THETADOT,THETA,VX,VY)

%    This function was generated by the Symbolic Math Toolbox version 8.2.
%    06-Dec-2018 10:17:49

if ((ax ~= 0.0) & (ay ~= 0.0))
    t0 = vx+vx.*sin(theta)-1.0./(ax.^2+ay.^2).^(3.0./2.0).*(R-pusherZ+R.*sin(theta)).*(ax.^3.*thetadot-(ay.^2.*jx.*sin(theta.*2.0))./2.0+ax.*ay.^2.*thetadot+(ax.*ay.*jy.*sin(theta.*2.0))./2.0)-(cos(theta).^2.*(ax.*jy-ay.*jx).*(pusherY-ry+R.*ay.*cos(theta).*1.0./sqrt(abs(ax).^2+abs(ay).^2)))./(ax.^2+ay.^2);
else
    t0 = NaN;
end
if ((ax ~= 0.0) & (ay ~= 0.0))
    t1 = vy+vy.*sin(theta)-(1.0./(ax.^2+ay.^2).^(3.0./2.0).*(R-pusherZ+R.*sin(theta)).*(ay.^3.*thetadot.*2.0-ax.^2.*jy.*sin(theta.*2.0)+ax.^2.*ay.*thetadot.*2.0+ax.*ay.*jx.*sin(theta.*2.0)))./2.0+(cos(theta).^2.*(ax.*jy-ay.*jx).*(pusherX-rx+R.*ax.*cos(theta).*1.0./sqrt(abs(ax).^2+abs(ay).^2)))./(ax.^2+ay.^2);
else
    t1 = NaN;
end
if ((ax ~= 0.0) & (ay ~= 0.0))
    t2 = -1.0./(ax.^2+ay.^2).^(3.0./2.0).*(pusherX-rx+R.*ax.*cos(theta).*1.0./sqrt(abs(ax).^2+abs(ay).^2)).*(ax.^3.*thetadot-(ay.^2.*jx.*sin(theta.*2.0))./2.0+ax.*ay.^2.*thetadot+(ax.*ay.*jy.*sin(theta.*2.0))./2.0)-(1.0./(ax.^2+ay.^2).^(3.0./2.0).*(pusherY-ry+R.*ay.*cos(theta).*1.0./sqrt(abs(ax).^2+abs(ay).^2)).*(ay.^3.*thetadot.*2.0-ax.^2.*jy.*sin(theta.*2.0)+ax.^2.*ay.*thetadot.*2.0+ax.*ay.*jx.*sin(theta.*2.0)))./2.0+ax.*vx.*cos(theta).*1.0./sqrt(abs(ax).^2+abs(ay).^2)+ay.*vy.*cos(theta).*1.0./sqrt(abs(ax).^2+abs(ay).^2);
else
    t2 = NaN;
end
pusher_vel = [t0;t1;t2];
